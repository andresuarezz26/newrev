{"ast":null,"code":"var _jsxFileName = \"/Users/gerardosuarez/Documents/aider-source-code/aider/client/src/components/TestConnection.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, Typography, Box, List, ListItem, ListItemText, CircularProgress } from '@mui/material';\nimport socketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestConnection = ({\n  open,\n  onClose\n}) => {\n  _s();\n  const [apiStatus, setApiStatus] = useState(null);\n  const [socketStatus, setSocketStatus] = useState('disconnected');\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [streamingContent, setStreamingContent] = useState('');\n  const [isSending, setIsSending] = useState(false);\n\n  // Handle HTTP API test\n  useEffect(() => {\n    const testApiConnection = async () => {\n      try {\n        setIsLoading(true);\n        const response = await fetch('http://localhost:5000/api/test_connection');\n        const data = await response.json();\n        setApiStatus(data);\n      } catch (error) {\n        setApiStatus({\n          status: 'error',\n          message: error.message\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    testApiConnection();\n  }, []);\n\n  // Handle Socket.IO connection and events\n  useEffect(() => {\n    // Create socket connection\n    const newSocket = socketIOClient('http://localhost:5000', {\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 5\n    });\n\n    // Set up event listeners\n    newSocket.on('connect', () => {\n      console.log('Socket.IO connected');\n      setSocketStatus('connected');\n      setSocket(newSocket);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Socket.IO disconnected');\n      setSocketStatus('disconnected');\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Socket.IO connection error:', error);\n      setSocketStatus('error');\n    });\n\n    // Handle incoming message chunks\n    newSocket.on('message_chunk', data => {\n      console.log('Received chunk:', data);\n      setStreamingContent(current => {\n        const newContent = current + (data.chunk || '');\n        console.log('Updated streaming content:', newContent);\n        return newContent;\n      });\n    });\n\n    // Handle message completion\n    newSocket.on('message_complete', data => {\n      console.log('Message complete:', data);\n      // Create a message object with timestamp and content\n      const newMessage = {\n        id: Date.now(),\n        // Unique identifier\n        timestamp: new Date().toISOString(),\n        content: streamingContent\n      };\n      // Add the new message to the messages array\n      setMessages(current => [...current, newMessage]);\n      // Clear the streaming content\n      setStreamingContent('');\n      setIsSending(false);\n    });\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up socket connection');\n      newSocket.disconnect();\n    };\n  }, []);\n  const sendTestMessage = () => {\n    if (socket && socketStatus === 'connected') {\n      setIsSending(true);\n      setStreamingContent(''); // Clear previous content\n      socket.emit('test_message', {\n        session_id: 'test_session',\n        message: 'Hello from client!'\n      });\n    } else {\n      console.error('Cannot send message: Socket not connected');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: onClose,\n    maxWidth: \"md\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Connection Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"HTTP API Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            backgroundColor: '#f5f5f5',\n            padding: '10px',\n            borderRadius: '4px',\n            overflow: 'auto'\n          },\n          children: JSON.stringify(apiStatus, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: [\"Socket.IO Status: \", socketStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: sendTestMessage,\n          disabled: socketStatus !== 'connected' || isSending,\n          sx: {\n            mt: 1\n          },\n          children: isSending ? 'Sending...' : 'Send Test Message'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), streamingContent && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Streaming Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            backgroundColor: '#f5f5f5',\n            padding: '10px',\n            borderRadius: '4px',\n            overflow: 'auto'\n          },\n          children: streamingContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Received Messages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: messages.map(msg => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  color: \"textSecondary\",\n                  children: new Date(msg.timestamp).toLocaleString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                  style: {\n                    padding: '10px',\n                    borderRadius: '4px',\n                    overflow: 'auto',\n                    marginTop: '8px'\n                  },\n                  children: msg.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 33\n            }, this)\n          }, msg.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(TestConnection, \"swc+cPzR9Xv/BXUBqGibnqREr2k=\");\n_c = TestConnection;\nexport default TestConnection;\nvar _c;\n$RefreshReg$(_c, \"TestConnection\");","map":{"version":3,"names":["React","useEffect","useState","Dialog","DialogTitle","DialogContent","DialogActions","Button","Typography","Box","List","ListItem","ListItemText","CircularProgress","socketIOClient","jsxDEV","_jsxDEV","TestConnection","open","onClose","_s","apiStatus","setApiStatus","socketStatus","setSocketStatus","messages","setMessages","socket","setSocket","isLoading","setIsLoading","streamingContent","setStreamingContent","isSending","setIsSending","testApiConnection","response","fetch","data","json","error","status","message","newSocket","transports","reconnection","reconnectionAttempts","on","console","log","current","newContent","chunk","newMessage","id","Date","now","timestamp","toISOString","content","disconnect","sendTestMessage","emit","session_id","maxWidth","fullWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","mb","variant","gutterBottom","size","style","backgroundColor","padding","borderRadius","overflow","JSON","stringify","onClick","disabled","mt","map","msg","primary","color","toLocaleString","marginTop","_c","$RefreshReg$"],"sources":["/Users/gerardosuarez/Documents/aider-source-code/aider/client/src/components/TestConnection.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { \n    Dialog, \n    DialogTitle, \n    DialogContent, \n    DialogActions, \n    Button, \n    Typography, \n    Box,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress\n} from '@mui/material';\nimport socketIOClient from 'socket.io-client';\n\nconst TestConnection = ({ open, onClose }) => {\n    const [apiStatus, setApiStatus] = useState(null);\n    const [socketStatus, setSocketStatus] = useState('disconnected');\n    const [messages, setMessages] = useState([]);\n    const [socket, setSocket] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [streamingContent, setStreamingContent] = useState('');\n    const [isSending, setIsSending] = useState(false);\n\n    // Handle HTTP API test\n    useEffect(() => {\n        const testApiConnection = async () => {\n            try {\n                setIsLoading(true);\n                const response = await fetch('http://localhost:5000/api/test_connection');\n                const data = await response.json();\n                setApiStatus(data);\n            } catch (error) {\n                setApiStatus({ status: 'error', message: error.message });\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        testApiConnection();\n    }, []);\n\n    // Handle Socket.IO connection and events\n    useEffect(() => {\n        // Create socket connection\n        const newSocket = socketIOClient('http://localhost:5000', {\n            transports: ['websocket'],\n            reconnection: true,\n            reconnectionAttempts: 5\n        });\n\n        // Set up event listeners\n        newSocket.on('connect', () => {\n            console.log('Socket.IO connected');\n            setSocketStatus('connected');\n            setSocket(newSocket);\n        });\n\n        newSocket.on('disconnect', () => {\n            console.log('Socket.IO disconnected');\n            setSocketStatus('disconnected');\n        });\n\n        newSocket.on('connect_error', (error) => {\n            console.error('Socket.IO connection error:', error);\n            setSocketStatus('error');\n        });\n\n        // Handle incoming message chunks\n        newSocket.on('message_chunk', (data) => {\n            console.log('Received chunk:', data);\n            setStreamingContent(current => {\n                const newContent = current + (data.chunk || '');\n                console.log('Updated streaming content:', newContent);\n                return newContent;\n            });\n        });\n\n        // Handle message completion\n        newSocket.on('message_complete', (data) => {\n            console.log('Message complete:', data);\n            // Create a message object with timestamp and content\n            const newMessage = {\n                id: Date.now(), // Unique identifier\n                timestamp: new Date().toISOString(),\n                content: streamingContent\n            };\n            // Add the new message to the messages array\n            setMessages(current => [...current, newMessage]);\n            // Clear the streaming content\n            setStreamingContent('');\n            setIsSending(false);\n        });\n\n        // Cleanup function\n        return () => {\n            console.log('Cleaning up socket connection');\n            newSocket.disconnect();\n        };\n    }, []);\n\n    const sendTestMessage = () => {\n        if (socket && socketStatus === 'connected') {\n            setIsSending(true);\n            setStreamingContent(''); // Clear previous content\n            socket.emit('test_message', {\n                session_id: 'test_session',\n                message: 'Hello from client!'\n            });\n        } else {\n            console.error('Cannot send message: Socket not connected');\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n            <DialogTitle>Connection Test</DialogTitle>\n            <DialogContent>\n                <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"h6\" gutterBottom>HTTP API Status:</Typography>\n                    {isLoading ? (\n                        <CircularProgress size={24} />\n                    ) : (\n                        <pre style={{ \n                            backgroundColor: '#f5f5f5', \n                            padding: '10px', \n                            borderRadius: '4px',\n                            overflow: 'auto'\n                        }}>\n                            {JSON.stringify(apiStatus, null, 2)}\n                        </pre>\n                    )}\n                </Box>\n\n                <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"h6\" gutterBottom>Socket.IO Status: {socketStatus}</Typography>\n                    <Button \n                        variant=\"contained\" \n                        onClick={sendTestMessage} \n                        disabled={socketStatus !== 'connected' || isSending}\n                        sx={{ mt: 1 }}\n                    >\n                        {isSending ? 'Sending...' : 'Send Test Message'}\n                    </Button>\n                </Box>\n\n                {streamingContent && (\n                    <Box sx={{ mb: 3 }}>\n                        <Typography variant=\"h6\" gutterBottom>Streaming Response:</Typography>\n                        <pre style={{ \n                            backgroundColor: '#f5f5f5', \n                            padding: '10px', \n                            borderRadius: '4px',\n                            overflow: 'auto'\n                        }}>\n                            {streamingContent}\n                        </pre>\n                    </Box>\n                )}\n\n                <Box>\n                    <Typography variant=\"h6\" gutterBottom>Received Messages:</Typography>\n                    <List>\n                        {messages.map((msg) => (\n                            <ListItem key={msg.id}>\n                                <ListItemText\n                                    primary={\n                                        <Box>\n                                            <Typography variant=\"caption\" color=\"textSecondary\">\n                                                {new Date(msg.timestamp).toLocaleString()}\n                                            </Typography>\n                                            <pre style={{ \n                                               \n                                                padding: '10px', \n                                                borderRadius: '4px',\n                                                overflow: 'auto',\n                                                marginTop: '8px'\n                                            }}>\n                                                {msg.content}\n                                            </pre>\n                                        </Box>\n                                    }\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default TestConnection; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}